# Build, tag, and publish a PR for use in development environments
# Packages will be published under a dist tag with the PR number, so "pr55" for PR #55.
# They will also be published with a prerelease version that looks like "<scope>/<pkg>@<rev>-pr<pr##>.#"
# e.g. @newscorp-ghfb/wsj@0.2.0-pr55.0

name: PR Deployer

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Provide the branch name to checkout'
        required: true
      pr:
        description: 'Provide the PR number to properly rev the version'
        required: true
      sha:
        description: 'Optionally deploy a specific sha'

  repository_dispatch: 
    types: [deploy-pr]

env:
  branch: ${{ github.event.inputs.branch || github.event.client_payload.branch }}
  pr_number: ${{ github.event.inputs.pr || github.event.client_payload.pr_number }}
  sha: ${{ github.event.inputs.sha || github.event.client_payload.sha }}

jobs:

  deploy_pr:
    name: PR Deployer
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          # so lerna can properly compare versions
          fetch-depth: "0"
          ref: ${{ env.branch }}
      
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: '@newscorp-ghfb'

      - name: install lerna locally
        run: yarn

      - name: bootstrap deps
        run: lerna bootstrap --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{secrets.BOT_TOKEN}}

      # run scripts without auth token
      # https://github.com/actions/setup-node
      - name: run any postinstall scripts
        run: lerna exec -- npm rebuild

      - name: tests
        run: lerna run test

      - name: import GPG key
        uses: crazy-max/ghaction-import-gpg@v2
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: publish prerelease
        run: |
          git config user.email ${{ secrets.BOT_EMAIL }}

          # if a sha is provided, point at that for the publish
          if [[ "${{ env.sha }}" ]]; then
            git reset --hard ${{ env.sha }}
          fi

          lerna publish \
            --allow-branch ${{ env.branch }} \
            --yes \
            --preid $PREID \
            --pre-dist-tag $PREID \
            --conventional-commits \
            --conventional-prerelease \
            --sign-git-tag \
            --sign-git-commit \
            --no-changelog \
            --message "chore(publish): deploy $PREID"
        env:
          NODE_AUTH_TOKEN: ${{secrets.PUBLISH_TOKEN}}
          PREID: "pr${{ env.pr_number }}"
          
