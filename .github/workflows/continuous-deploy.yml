# when a PR is merged into `main`, this will run the tests for every package and publish a new package
# prerelease packages are identified with `pre` after the next version number
# e.g. @newscorp-ghfb/<pkg>@0.2.0-pre.0 will eventually become @newscorp-ghfb/<pkg>@0.2.0
# successive prereleases will bump the final number, so `pre.0` becomes `pre.1`, and so on.
#
# When a prerelease is first prepared, a new "release" PR against `main` will be opened. The new PR will contain
# the updated CHANGELOG (according to conventional commits) and the bumped version number.
# The "release" PRs will stay in sync with subsequent prereleases.
#
# PRs with the `no-deploy` label will skip this workflow

name: Continuous Deployment

on:
  pull_request:
    types: [closed]
    paths:
      - "packages/**"
    branches: [main]

jobs:
  # build_and_test:
  #   name: build and test
  #   # filter for merged PRs and skip release branches or any with our escape hatch label 'no-deploy'
  #   if: ${{ github.event.pull_request.merged == true && !startsWith(github.head_ref, 'release-') && !contains(github.event.pull_request.labels.*.name, 'no-deploy') }}

  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "14.x"
  #         always-auth: true
  #         registry-url: https://npm.pkg.github.com

  #     - name: Cache node_modules
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           node_modules
  #           */*/node_modules
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

  #     - name: bootstrap deps
  #       run: |
  #         yarn --ignore-scripts

  #     # run scripts without auth token
  #     # https://github.com/actions/setup-node
  #     - name: run any postinstall scripts
  #       run: |
  #         yarn rebuild
  #         yarn prepare

  #     - name: tests
  #       run: lerna run test

  find_changes:
    # needs: build_and_test
    if: ${{ github.event.pull_request.merged == true && !startsWith(github.head_ref, 'release-') && !contains(github.event.pull_request.labels.*.name, 'no-deploy') }}
    runs-on: ubuntu-latest
    outputs:
      changed_packages: ${{ steps.changes.outputs.changed_paths }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - id: changes
        run: |
          CHANGED=$(lerna changed -p | xargs realpath --relative-to=. | jq --slurp --raw-input --compact-output '[split("\n")[:-1] | .[] | split("/") | .[1]]')
          echo "::set-output name=changed_paths::$CHANGED"

  # creates/updates release PR
  # outputs `pr` if PR was created or updated, `undefined` otherwise
  release_pr:
    name: Create/Update Release PR
    runs-on: ubuntu-latest
    needs: find_changes
    outputs:
      pr: ${{ steps.create-pr.outputs.pr }}
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.find_changes.outputs.changed_packages) }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - uses: google-github-actions/release-please-action@v2
        name: open (or edit) release PR for this package version
        id: create-pr
        with:
          path: packages/${{ matrix.package }}
          release-type: node
          package-name: "@${{ github.repository_owner }}/${{ matrix.package }}"
          monorepo-tags: true
          bump-minor-pre-major: true
          command: release-pr
          default-branch: main

  prerelease:
    name: Publish Prerelease to Package Registry
    runs-on: ubuntu-latest
    needs: [find_changes, release_pr]

    if: needs.release_pr.outputs.pr

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: "@newscorp-ghfb"

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: bootstrap deps
        run: |
          yarn --ignore-scripts --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{secrets.PAT}}


      # run scripts without auth token
      # https://github.com/actions/setup-node
      # - name: run any postinstall scripts
      #   run: |
      #     yarn rebuild
      #     yarn prepare

      - name: import GPG key
        uses: crazy-max/ghaction-import-gpg@v2
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: check for previous prereleases
        env:
          PREID: beta
        run: |
          PACKAGES="${{ join(fromJSON(needs.find_changes.outputs.changed_packages), ' ') }}"

          # lerna reads the version in the package file when revving prereleases
          # but we don't commit prerelease revs on merges to main
          # look at the tags for each changed package and rev the package file by hand
          # so that lerna can properly bump the prerelease number
          for PKG in $PACKAGES; do
            echo "::debug::previous tags for this package: $(git tag --list "@${{ github.repository_owner }}/$PKG@*")"

            # pull the most recent tag for the current $PKG
            # use --always to prevent this from failing on fresh packages
            LAST_TAG=$(git describe --tags --abbrev=0 --match "@${{ github.repository_owner }}/$PKG@*" --always)

            # prerelease tags have the format @<scope>/<pkg>@<rev>-<preid>.<prerev>
            # pull just the version number from full tag
            LAST_REV=$(sed -E "s/@${{ github.repository_owner }}\/$PKG@(.*)/\1/" <<< $LAST_TAG)

            # if the version number contains our prerelease identifier, then this package is currently in prerelease
            # if grep doesn't match, use "|| :;" to prevent the runner from dying
            IN_PRERELEASE=$({ grep -E "-$PREID\.[0-9]+" || :; } <<< $LAST_TAG)

            echo "::debug::last tag: $LAST_TAG"
            echo "::debug::last rev: $LAST_REV"
            echo "::debug::in pre: $IN_PRERELEASE"

            if [[ $IN_PRERELEASE ]]; then
              echo "::debug::setting rev for prerelease bump"
              cd packages/$PKG
              npm version $LAST_REV
              git commit -am 'rev for publishing'
              cd ../..
            fi
          done

      - name: publish prerelease
        env:
          NODE_AUTH_TOKEN: ${{ secrets.BOT_TOKEN }}
          PREID: beta
        run: |
          lerna publish \
            --yes \
            --conventional-commits \
            --conventional-prerelease \
            --no-changelog \
            --no-push \
            --preid $PREID

      - name: sign and push prerelease tags
        run: |
          # gather tags from this release
          TAGS=$(git tag --points-at HEAD)

          # `main` is protected, so we can push back the commit lerna makes
          # move the tag lerna creates to point at the merge commit
          #
          # tags must be signed and annotated in order for lerna
          # to recognize them when calculating version bumps in future commits

          while IFS= read -r TAG; do
            git tag --force -m $TAG $TAG ${{ github.sha }}
            git push origin $TAG --force
          done <<< $TAGS
